import { useEffect, useState } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import RecordCard from "../components/RecordCard";
import Form from "../components/Form";
import Button from "../components/Button";
import GET_ALL_RECORDS from "../resolvers/queries/records";
import { SpinnerRoundOutlined } from "spinners-react";
import Router from "next/router";

// HELPERS
import client from "../utils/apollo-client";
import { DELETE_RECORD } from "../resolvers/mutations/records";
import { useMutation } from "@apollo/client";
import { initialFormValues } from "../utils/constants";
import { helperInstance } from "../utils/helpers";
import { toast } from "react-toastify";

export default function Home() {
  // STATES
  const [showFormModal, setShowFormModal] = useState(false);
  const [initialValues, setInitialValues] = useState(initialFormValues);
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [records, setRecords] = useState([]);
  const [numberOfPages, setNumberOfPages] = useState(0);

  // MUTATIONS
  const [deleteRecord] = useMutation(DELETE_RECORD);

  // FUNCTIONS
  const openFormModal = (record) => {
    setInitialValues(record);
    setShowFormModal(true);
  };
  const handleModialClose = (reloadHome) => {
    setShowFormModal(false);
    if (reloadHome) {
      Router.reload();
    }
  };

  /**
   *
   * @param {*} id: id of the record to be deleted
   */
  const handleDelete = async (id) => {
    try {
      setLoading(true);
      const res = await deleteRecord({
        variables: {
          id,
        },
      });
      setLoading(false);
      if (res.data.deleteRecord) {
        toast.success("Record deleted successfully");
        Router.reload();
      } else {
        toast.error("Something went wrong");
      }
    } catch (error) {
      console.log(error);
      setLoading(false);
    }
  };

  /**
   *
   * @param {*} direction: 1 for next page, -1 for previous page
   */
  const handlePagination = (direction) => {
    console.log(direction);
    if (direction === 1 && currentPage < numberOfPages) {
      setCurrentPage(currentPage + 1);
    } else if (direction === -1 && currentPage > 1) {
      setCurrentPage(currentPage - 1);
    } else {
      toast.info("You are on the first or last page");
    }
  };

  useEffect(() => {
    const getRecords = async () => {
      try {
        setLoading(true);
        const limit = helperInstance.itemsPerPage;
        const skip = (currentPage - 1) * limit;
        const res = await client.query({
          query: GET_ALL_RECORDS,
          variables: { limit, skip },
        });
        console.log(res);
        setLoading(false);
        setRecords(res.data.getAllRecords);
        setNumberOfPages(
          helperInstance.getNumberOfPages(res.data.getRecordCount)
        );
      } catch (error) {
        console.log(error);
        setLoading(false);
      }
    };
    getRecords();
  }, [currentPage]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Home page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading && (
        <div className="spinner absolute inset-0 z-10 flex justify-center items-center">
          <SpinnerRoundOutlined />
        </div>
      )}
      <div className="py-5">
        <h3 className="text-center text-3xl mb-4">
          Welcome to our country records app
        </h3>
        <p className="text-center text-sm">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
      </div>

      <div className="form my-5 text-center ">
        {/* <input className="" placeholder="search for a record" /> */}
        <button className="btn-new" onClick={() => setShowFormModal(true)}>
          Create a new record
        </button>
      </div>

      <div className="grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 grid py-4">
        {records.map((record) => (
          <RecordCard
            record={record}
            key={record.id}
            openCard={(record) => openFormModal(record)}
            onDelete={(id) => handleDelete(id)}
          />
        ))}
        {records.length === 0 && !loading && (
          <div className="text-center">
            <p className="text-lg">No records found</p>
          </div>
        )}
      </div>
      {numberOfPages > 1 && (
        <div className="flex flex-row gap-5">
          <Button
            disabled={currentPage === 1}
            label="< Prev"
            onClick={() => handlePagination(-1)}
            variant="new"
          />
          <Button
            disabled={currentPage === numberOfPages}
            label="Next >"
            onClick={() => handlePagination(1)}
            variant="new"
          />
        </div>
      )}
      <Form
        initialValues={initialValues}
        visible={showFormModal}
        onSubmit={() => {}}
        hide={(reloadHome) => handleModialClose(reloadHome)}
      />
    </div>
  );
}
